---
import type { CollectionEntry } from "astro:content";
import path from "node:path";
import ContentMeta from "@components/ContentMeta.astro";
import ImageWrapper from "@components/misc/ImageWrapper.astro";
import Markdown from "@components/misc/Markdown.astro";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import {
	getCourseDataBundle,
	getSortedCourses,
	getSortedLessons,
} from "@utils/content/course-utils";
import {
	keywordGenerator,
	metadataGenerator,
	structuredDataFactory,
} from "@utils/seo";
import { cleanSlug } from "@utils/slug-utils";
import { assertIsCourse } from "@utils/type-guards";
import { getCourseUrlBySlug, getDir } from "@utils/url-utils";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
	const courses = await getSortedCourses();
	return courses.map((course) => ({
		params: { slug: course.slug },
		props: { course },
	}));
}

interface Props {
	course: CollectionEntry<"courses">;
}

const { course } = Astro.props;

// Ensure this is a course type using type assertion
assertIsCourse(course, "course page");

// Get all course data efficiently in one call
const courseData = await getCourseDataBundle(course.slug);

if (!courseData) {
	return new Response(null, {
		status: 404,
		statusText: "Course not found",
	});
}

const { sections, lessons, totalLessons, totalSections } = courseData;

// Get course metadata
const { Content } = await course.render();

// SEO enhancements
const baseUrl =
	Astro.site?.toString().replace(/\/$/, "") || "https://kosrat.dev";
const pageTitle = metadataGenerator.generateCoursePageTitle(course);
const description = metadataGenerator.generateCourseMetaDescription(course);
const keywords = keywordGenerator.generateKeywords(course, undefined, [
	"course",
	"tutorial",
	"programming",
	"development",
	"mobile development",
	"flutter",
	"android",
	"ios",
]);
const structuredData = structuredDataFactory.generateCourseStructuredData(
	course,
	totalLessons,
	sections,
);
---

<MainGridLayout 
	title={pageTitle}
	description={description}
	keywords={keywords}
	structuredData={structuredData}
	courseTitle={course.data.title}
	courseLevel={course.data.level}
	category={course.data.category}
	image={course.data.image}
>
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
		<div class="card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full">
			<!-- Course Header -->
			<div class="mb-6">
				<!-- Course Title -->
				<div class="relative onload-animation">
					<div
						data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
						class="transition w-full block font-bold mb-3
						text-3xl md:text-[2.25rem]/[2.75rem]
						text-black/90 dark:text-white/90
						md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
						before:absolute before:top-[0.75rem] before:left-[-1.125rem]
					">
						{course.data.title}
					</div>
				</div>
				
				<!-- Course Metadata -->
				{course.data.type === "course" && (
					<ContentMeta 
						contentType="course"
						class="mb-5"
						level={course.data.level}
						category={course.data.category}
						totalLessons={totalLessons}
					/>
				)}
				{!course.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
			</div>

			<!-- Course Cover Image -->
			{course.data.type === "course" && course.data.image &&
				<ImageWrapper id="course-cover" src={course.data.image} basePath={path.join("content/courses/", getDir(course.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
			}
			
			<!-- Course Description -->
			{course.data.type === "course" && (
				<Markdown class="mb-6 markdown-content onload-animation">
					<Content />
				</Markdown>
			)}
			
			<!-- Course Sections -->
			<div class="space-y-4">
				<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
					<h2 class="text-xl sm:text-2xl font-bold text-black/90 dark:text-white/90">
						Course Content
					</h2>
					
					<!-- Reset Progress Button -->
					<button 
						id="reset-progress-btn"
						class="flex items-center justify-center sm:justify-start gap-2 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors text-sm font-medium py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20"
					>
						<Icon name="material-symbols:refresh-rounded" class="text-lg" />
						<span class="whitespace-nowrap">Reset Progress</span>
					</button>
				</div>
				
				{sections.length > 0 ? (
					<div class="space-y-3">
						{await Promise.all(sections.map(async (section, sectionIndex) => {
							const lessons = await getSortedLessons(section.slug);
							
							// Calculate starting lesson number for this section
							let lessonNumberOffset = 0;
							for (let i = 0; i < sectionIndex; i++) {
								const previousSectionLessons = await getSortedLessons(sections[i].slug);
								lessonNumberOffset += previousSectionLessons.length;
							}
							
							return (
								<div class="course-section border border-black/10 dark:border-white/10 rounded-lg">
									<!-- Section Header -->
									<div 
										class="section-toggle w-full text-left p-4 hover:bg-black/5 dark:hover:bg-white/5 transition-all rounded-lg text-black dark:text-white cursor-pointer select-none focus:outline-none"
										data-section={section.slug}
										aria-expanded="false"
										aria-controls={`section-content-${section.slug}`}
										id={`section-header-${section.slug}`}
										role="button"
									>
										<div class="flex items-center justify-between">
											<div class="flex items-center gap-3">
												<!-- Section Completion Indicator -->
												<div class="section-check w-5 h-5 border-2 border-[var(--primary)] rounded-md flex items-center justify-center" aria-hidden="true">
													<svg class="w-3 h-3 text-[var(--primary)] hidden" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
													</svg>
												</div>
												
												<div>
													<h3 class="font-semibold text-lg text-black dark:text-white">{section.data.title}</h3>
													{section.data.type === "section" && section.data.description && (
														<p class="text-sm text-black/60 dark:text-white/60 mt-1">
															{section.data.description}
														</p>
													)}
												</div>
											</div>
											
											<!-- Expand/Collapse Icon -->
											<svg class="expand-icon w-5 h-5 transition-transform transform text-black dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
											</svg>
										</div>
									</div>
									
									<!-- Section Content (Lessons) -->
									<div 
										class="section-content hidden border-t border-black/10 dark:border-white/10"
										id={`section-content-${section.slug}`}
										role="region"
										aria-labelledby={`section-header-${section.slug}`}
									>
										<div class="p-4 space-y-2">
											{lessons.length > 0 ? (
												<div class="lessons-container space-y-2">
													{lessons.map((lesson, lessonIndex) => {
														// Calculate continuous lesson number
														const continuousLessonNumber = lessonNumberOffset + lessonIndex + 1;
														
														// Extract just the section and lesson identifiers from the full slugs and clean them
														const sectionId = cleanSlug(section.slug.split('/').pop() || section.slug);
														const lessonId = cleanSlug(lesson.slug.split('/').pop() || lesson.slug);
														
														return (
															<a 
																href={`${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`}
																class="lesson-item flex items-center gap-3 p-3 rounded-lg bg-white/50 dark:bg-black/20 hover:bg-black/5 dark:hover:bg-white/5 border border-black/5 dark:border-white/5 transition-all group text-black dark:text-white"
																aria-label={`Go to ${lesson.data.title}, Lesson ${continuousLessonNumber}`}
																role="link"
															>
																<!-- Lesson Completion Indicator -->
																<div class="lesson-check w-4 h-4 border-2 border-[var(--primary)] rounded-md flex items-center justify-center" aria-hidden="true">
																	<svg class="w-2.5 h-2.5 text-[var(--primary)] hidden" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
																		<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
																	</svg>
																</div>
																
																<div class="flex-1">
																	<h4 class="font-medium text-black/90 dark:text-white/90 group-hover:text-[var(--primary)] transition-colors">
																		{lesson.data.title}
																	</h4>
																	<div class="text-xs text-black/60 dark:text-white/60">
																		{lesson.data.type === "lesson" ? `Lesson ${continuousLessonNumber}` : "Lesson"}
																	</div>
																</div>
																
																<!-- Lesson Navigation Arrow -->
																<svg class="w-4 h-4 text-black/40 dark:text-white/40 group-hover:text-[var(--primary)] transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
																</svg>
															</a>
														);
													})}
												</div>
											) : (
												<p class="text-black/60 dark:text-white/60 text-sm">
													No lessons in this section yet.
												</p>
											)}
										</div>
									</div>
								</div>
							);
						}))}
					</div>
				) : (
					<p class="text-black/60 dark:text-white/60">
						No sections available for this course yet.
					</p>
				)}
			</div>
		</div>
	</div>
</MainGridLayout>

<style>
	.course-section {
		transition: all 0.2s ease;
	}
	
	.section-toggle:hover {
		background-color: var(--btn-plain-bg-hover);
	}
	
	.expand-icon {
		transition: transform 0.2s ease;
	}
	
	/* Smooth transitions for completion indicators */
	.section-check, .lesson-check {
		transition: all 0.3s ease;
	}
	
	.section-check svg, .lesson-check svg {
		transition: color 0.3s ease;
	}

	.section-content {
		transition: max-height 0.3s ease-out;
		overflow: hidden;
	}
	
	.section-toggle:focus {
		outline: 2px solid var(--primary);
		outline-offset: 2px;
	}
	
	/* Improved touch targets for mobile */
	@media (max-width: 768px) {
		.section-toggle {
			padding: 1rem;
			min-height: 60px;
		}
		
		.lesson-item {
			padding: 1rem;
			min-height: 56px;
		}
		
		/* Larger tap targets for checkboxes */
		.section-check, .lesson-check {
			width: 1.5rem;
			height: 1.5rem;
		}
	}
	
	/* Focus styles for better accessibility */
	.lesson-item:focus {
		outline: 2px solid var(--primary);
		outline-offset: 2px;
	}
</style>
