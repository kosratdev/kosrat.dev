---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import CourseMeta from "@components/CourseMeta.astro";
import Markdown from "@components/misc/Markdown.astro";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import {
	getAllCourseLessons,
	getSortedCourses,
	getSortedLessons,
	getSortedSections,
} from "@utils/content-utils";
import { getCourseUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
	const courses = await getSortedCourses();
	return courses.map((course) => ({
		params: { slug: course.slug },
		props: { course },
	}));
}

interface Props {
	course: CollectionEntry<"courses">;
}

const { course } = Astro.props;

// Get all sections for this course
const sections = await getSortedSections(course.slug);

// Get total lessons count
const totalLessons = await getAllCourseLessons(course.slug);

// Get course metadata
const { Content } = await course.render();
---

<MainGridLayout title={course.data.title}>
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
		<div class="card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full">
			<!-- Course Header -->
			<div class="mb-6">
				<!-- Course Title -->
				<h1 class="text-3xl md:text-4xl font-bold mb-4 text-black/90 dark:text-white/90">
					{course.data.title}
				</h1>
				
				<!-- Course Metadata -->
				{course.data.type === "course" && (
					<CourseMeta 
						class="mb-5"
						level={course.data.level}
						category={course.data.category}
						totalLessons={totalLessons.length}
					/>
				)}
				
				<!-- Course Content -->
				{course.data.type === "course" && (
					<Markdown class="mb-6 markdown-content">
						<Content />
					</Markdown>
				)}
			</div>

			<!-- Course Sections -->
			<div class="space-y-4">
				<div class="flex items-center justify-between mb-4">
					<h2 class="text-2xl font-bold text-black/90 dark:text-white/90">
						Course Content
					</h2>
					
					<!-- Reset Progress Button -->
					<button 
						id="reset-progress-btn"
						class="flex items-center gap-2 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors text-sm font-medium"
					>
						<Icon name="material-symbols:refresh-rounded" class="text-lg" />
						Reset Progress
					</button>
				</div>
				
				{sections.length > 0 ? (
					<div class="space-y-3">
						{await Promise.all(sections.map(async (section) => {
							const lessons = await getSortedLessons(section.slug);
							return (
								<div class="course-section border border-black/10 dark:border-white/10 rounded-lg">
									<!-- Section Header -->
									<button 
										class="section-toggle w-full text-left p-4 hover:bg-black/5 dark:hover:bg-white/5 transition-all rounded-lg text-black dark:text-white"
										data-section={section.slug}
									>
										<div class="flex items-center justify-between">
											<div class="flex items-center gap-3">
												<!-- Section Completion Indicator -->
												<div class="section-check w-5 h-5 border-2 border-[var(--primary)] rounded-md flex items-center justify-center">
													<svg class="w-3 h-3 text-[var(--primary)] hidden" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
													</svg>
												</div>
												
												<div>
													<h3 class="font-semibold text-lg text-black dark:text-white">{section.data.title}</h3>
													{section.data.type === "section" && section.data.description && (
														<p class="text-sm text-black/60 dark:text-white/60 mt-1">
															{section.data.description}
														</p>
													)}
												</div>
											</div>
											
											<!-- Expand/Collapse Icon -->
											<svg class="expand-icon w-5 h-5 transition-transform transform text-black dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
											</svg>
										</div>
									</button>
									
									<!-- Section Content (Lessons) -->
									<div class="section-content hidden border-t border-black/10 dark:border-white/10">
										<div class="p-4 space-y-2">
											{lessons.length > 0 ? (
												<div class="lessons-container space-y-2">
													{lessons.map((lesson) => {
														// Extract just the section and lesson identifiers from the full slugs
														const sectionId = section.slug.split('/').pop() || section.slug;
														const lessonId = lesson.slug.split('/').pop() || lesson.slug;
														
														return (
															<a 
																href={`${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`}
																class="lesson-item flex items-center gap-3 p-3 rounded-lg bg-white/50 dark:bg-black/20 hover:bg-black/5 dark:hover:bg-white/5 border border-black/5 dark:border-white/5 transition-all group text-black dark:text-white"
															>
																<!-- Lesson Completion Indicator -->
																<div class="lesson-check w-4 h-4 border-2 border-[var(--primary)] rounded-sm flex items-center justify-center">
																	<svg class="w-2.5 h-2.5 text-[var(--primary)] hidden" fill="currentColor" viewBox="0 0 20 20">
																		<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
																	</svg>
																</div>
																
																<div class="flex-1">
																	<h4 class="font-medium text-black/90 dark:text-white/90 group-hover:text-[var(--primary)] transition-colors">
																		{lesson.data.title}
																	</h4>
																	<div class="text-xs text-black/60 dark:text-white/60">
																		{lesson.data.type === "lesson" ? `Lesson ${lesson.data.order}` : "Lesson"}
																	</div>
																</div>
																
																<!-- Lesson Navigation Arrow -->
																<svg class="w-4 h-4 text-black/40 dark:text-white/40 group-hover:text-[var(--primary)] transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
																</svg>
															</a>
														);
													})}
												</div>
											) : (
												<p class="text-black/60 dark:text-white/60 text-sm">
													No lessons in this section yet.
												</p>
											)}
										</div>
									</div>
								</div>
							);
						}))}
					</div>
				) : (
					<p class="text-black/60 dark:text-white/60">
						No sections available for this course yet.
					</p>
				)}
			</div>
		</div>
	</div>
</MainGridLayout>

<script>
	// Course detail page functionality
	function initializeCourseAccordion() {
		// Remove any existing event listeners to prevent duplicates
		const existingToggles = document.querySelectorAll('.section-toggle');
		existingToggles.forEach(toggle => {
			const newToggle = toggle.cloneNode(true);
			toggle.parentNode?.replaceChild(newToggle, toggle);
		});
		
		// Section toggle functionality
		const sectionToggles = document.querySelectorAll('.section-toggle');
		
		sectionToggles.forEach(toggle => {
			toggle.addEventListener('click', () => {
				const section = toggle.closest('.course-section');
				const content = section?.querySelector('.section-content');
				const icon = toggle.querySelector('.expand-icon');
				
				if (content && icon) {
					const isHidden = content.classList.contains('hidden');
					
					if (isHidden) {
						content.classList.remove('hidden');
						(icon as HTMLElement).style.transform = 'rotate(180deg)';
					} else {
						content.classList.add('hidden');
						(icon as HTMLElement).style.transform = 'rotate(0deg)';
					}
				}
			});
		});
		
		// Reset progress functionality
		const resetBtn = document.getElementById('reset-progress-btn');
		if (resetBtn) {
			// Clone to remove existing event listeners
			const newResetBtn = resetBtn.cloneNode(true);
			resetBtn.parentNode?.replaceChild(newResetBtn, resetBtn);
			
			newResetBtn.addEventListener('click', () => {
				const courseSlug = window.location.pathname.split('/')[2];
				if (confirm('Are you sure you want to reset all progress for this course?')) {
					// TODO: Implement resetCourseProgress function
					console.log('Resetting progress for course:', courseSlug);
					// Refresh the page to update progress indicators
					window.location.reload();
				}
			});
		}
	}

	// Initialize on DOM content loaded (initial page load)
	document.addEventListener('DOMContentLoaded', initializeCourseAccordion);
	
	// Initialize on Swup page transitions
	document.addEventListener('swup:contentReplaced', initializeCourseAccordion);
	
	// Fallback for View Transitions API (if used instead of Swup)
	document.addEventListener('astro:page-load', initializeCourseAccordion);
</script>

<style>
	.course-section {
		transition: all 0.2s ease;
	}
	
	.section-toggle:hover {
		background-color: var(--btn-plain-bg-hover);
	}
	
	.expand-icon {
		transition: transform 0.2s ease;
	}
</style>
