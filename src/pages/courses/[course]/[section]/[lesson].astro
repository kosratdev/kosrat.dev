---
import type { CollectionEntry } from "astro:content";
import path from "node:path";
import ContentMeta from "@components/ContentMeta.astro";
import Comment from "@components/comment/index.astro";
import ContentNavigation, {
	type NavigationItem,
} from "@components/control/ContentNavigation.astro";
import ImageWrapper from "@components/misc/ImageWrapper.astro";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import {
	getCourseDataBundle,
	getLessonNavigation,
	getSortedCourses,
	getSortedLessons,
} from "@utils/content/course-utils";
import { formatDateToYYYYMMDD } from "@utils/date-utils";
import {
	keywordGenerator,
	metadataGenerator,
	structuredDataFactory,
} from "@utils/seo";
import { cleanSlug } from "@utils/slug-utils";
import { getCourseUrlBySlug, getDir } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig, profileConfig, siteConfig } from "src/config";

export async function getStaticPaths() {
	const courses = await getSortedCourses();
	const paths: Array<{
		params: { course: string; section: string; lesson: string };
		props: {
			course: CollectionEntry<"courses">;
			section: CollectionEntry<"courses">;
			lesson: CollectionEntry<"courses">;
		};
	}> = [];

	for (const course of courses) {
		const courseData = await getCourseDataBundle(course.slug);
		if (!courseData) continue;

		const { sections } = courseData;

		for (const section of sections) {
			const lessons = await getSortedLessons(section.slug);

			for (const lesson of lessons) {
				// Extract just the identifiers from the full slugs and clean them
				const sectionId = cleanSlug(
					section.slug.split("/").pop() || section.slug,
				);
				const lessonId = cleanSlug(lesson.slug.split("/").pop() || lesson.slug);

				paths.push({
					params: {
						course: course.slug,
						section: sectionId,
						lesson: lessonId,
					},
					props: {
						course,
						section,
						lesson,
					},
				});
			}
		}
	}

	return paths;
}

interface Props {
	course: CollectionEntry<"courses">;
	section: CollectionEntry<"courses">;
	lesson: CollectionEntry<"courses">;
}

const { course, section, lesson } = Astro.props;

// Type guards to ensure we have the right content types
if (course.data.type !== "course") {
	throw new Error("Expected course entry");
}
if (section.data.type !== "section") {
	throw new Error("Expected section entry");
}
if (lesson.data.type !== "lesson") {
	throw new Error("Expected lesson entry");
}

// Get all course data and navigation info efficiently
const courseData = await getCourseDataBundle(course.slug);
if (!courseData) {
	throw new Error("Course data not found");
}

const { sections: allSections, lessons: allLessons } = courseData;

// Get lesson navigation data
const lessonNav = await getLessonNavigation(course.slug, lesson.slug);
if (!lessonNav) {
	throw new Error("Lesson navigation data not found");
}

// Calculate continuous lesson number using optimized navigation data
const continuousLessonNumber = lessonNav.currentIndex + 1;

// Get previous and next lessons from optimized navigation
const previousLesson = lessonNav.previousLesson;
const nextLesson = lessonNav.nextLesson;

// Find current section index
const currentSectionIndex = allSections.findIndex(
	(s) => s.slug === section.slug,
);

// Get navigation info for previous item
let previousNav: NavigationItem | null = null;
if (previousLesson) {
	// Check if previous lesson is in the same section
	const prevLessonSectionSlug = previousLesson.slug
		.split("/")
		.slice(0, -1)
		.join("/");
	const currentSectionSlug = section.slug;

	if (prevLessonSectionSlug === currentSectionSlug) {
		// Previous lesson in same section
		const parts = previousLesson.slug.split("/");
		const sectionId = cleanSlug(parts[parts.length - 2]);
		const lessonId = cleanSlug(parts[parts.length - 1]);
		const url = `${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`;

		previousNav = {
			type: "lesson",
			title: previousLesson.data.title,
			subtitle: "Previous",
			lesson: previousLesson,
			url: url,
		};
	} else {
		// Previous lesson is in different section (previous section)
		const prevSection = allSections.find(
			(s) => s.slug === prevLessonSectionSlug,
		);
		if (prevSection) {
			const parts = previousLesson.slug.split("/");
			const sectionId = cleanSlug(parts[parts.length - 2]);
			const lessonId = cleanSlug(parts[parts.length - 1]);
			const url = `${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`;

			previousNav = {
				type: "section",
				title: prevSection.data.title,
				subtitle: "Previous Section",
				lesson: previousLesson,
				url: url,
			};
		}
	}
}

// Get navigation info for next item
let nextNav: NavigationItem | null = null;
if (nextLesson) {
	// Check if next lesson is in the same section
	const nextLessonSectionSlug = nextLesson.slug
		.split("/")
		.slice(0, -1)
		.join("/");
	const currentSectionSlug = section.slug;

	if (nextLessonSectionSlug === currentSectionSlug) {
		// Next lesson in same section
		const parts = nextLesson.slug.split("/");
		const sectionId = cleanSlug(parts[parts.length - 2]);
		const lessonId = cleanSlug(parts[parts.length - 1]);
		const url = `${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`;

		nextNav = {
			type: "lesson",
			title: nextLesson.data.title,
			subtitle: "Next",
			lesson: nextLesson,
			url: url,
		};
	} else {
		// Next lesson is in different section (next section)
		const nextSection = allSections.find(
			(s) => s.slug === nextLessonSectionSlug,
		);
		if (nextSection) {
			const parts = nextLesson.slug.split("/");
			const sectionId = cleanSlug(parts[parts.length - 2]);
			const lessonId = cleanSlug(parts[parts.length - 1]);
			const url = `${getCourseUrlBySlug(course.slug)}${sectionId}/${lessonId}/`;

			nextNav = {
				type: "section",
				title: nextSection.data.title,
				subtitle: "Next Section",
				lesson: nextLesson,
				url: url,
			};
		}
	}
} else {
	// This is the last lesson
	nextNav = {
		type: "finish",
		title: "Finish Course",
		subtitle: "Complete this course",
	};
}

const { Content, headings, remarkPluginFrontmatter } = await lesson.render();

// SEO enhancements
const baseUrl =
	Astro.site?.toString().replace(/\/$/, "") || "https://kosrat.dev";
const pageTitle = metadataGenerator.generateCoursePageTitle(course, lesson);
const description = metadataGenerator.generateCourseMetaDescription(
	course,
	lesson,
);
const keywords = keywordGenerator.generateKeywords(course, lesson, [
	"lesson",
	"tutorial",
	section.data.title.toLowerCase(),
]);
const structuredData = structuredDataFactory.generateLessonStructuredData(
	lesson,
	course,
	section,
);

// Create JSON-LD for lessons (similar to posts) - keeping existing for compatibility
const jsonLd = {
	"@context": "https://schema.org",
	"@type": "LearningResource",
	headline: lesson.data.title,
	description: lesson.data.title,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished:
		lesson.data.type === "lesson"
			? formatDateToYYYYMMDD(lesson.data.published)
			: "",
	inLanguage: siteConfig.lang.replace("_", "-"),
	isPartOf: {
		"@type": "Course",
		name: course.data.title,
	},
};
---

<MainGridLayout 
	title={pageTitle}
	description={description}
	keywords={keywords}
	structuredData={structuredData}
	courseTitle={course.data.title}
	lessonTitle={lesson.data.title}
	courseLevel={course.data.level}
	category={course.data.category}
	image={lesson.data.image}
	headings={headings}
>
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="lesson-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- DIFFERENCE 1: Breadcrumbs at the top -->
            <nav class="text-sm text-black/60 dark:text-white/60 mb-3 onload-animation">
                <a href={getCourseUrlBySlug(course.slug)} class="hover:text-[var(--primary)] transition-colors">
                    {course.data.title}
                </a>
                <span class="mx-2">â€º</span>
                <span>{section.data.title}</span>
            </nav>

            <!-- DIFFERENCE 2: Lesson number, word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                {lesson.data.type === "lesson" && (
                    <div class="flex flex-row items-center">
                        <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                            <Icon name="material-symbols:numbers-rounded"></Icon>
                        </div>
                        <div class="text-sm">Lesson {continuousLessonNumber}</div>
                    </div>
                )}
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
                    </div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {lesson.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                {lesson.data.type === "lesson" && (
                    <ContentMeta
                        contentType="post"
                        class="mb-5"
                        published={lesson.data.published}
                        updated={lesson.data.updated}
                        tags={[]}
                        category={course.data.title}
                        hideTagsForMobile={true}
                    />
                )}
                <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>
            </div>

            <!-- cover image -->
            {lesson.data.type === "lesson" && lesson.data.image &&
                <ImageWrapper id="lesson-cover" src={lesson.data.image} basePath={path.join("content/courses/", getDir(lesson.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }

            <Markdown class="mb-6 markdown-content onload-animation">
                <Content />
            </Markdown>

            {licenseConfig.enable && lesson.data.type === "lesson" && <License title={lesson.data.title} slug={lesson.slug} pubDate={lesson.data.published} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>

    <!-- Navigation -->
    <ContentNavigation 
        previousNav={previousNav}
        nextNav={nextNav}
        currentNumber={continuousLessonNumber}
        totalNumber={allLessons.length}
        progressText={`Lesson ${continuousLessonNumber} of ${allLessons.length}`}
        courseSlug={course.slug}
        currentSlug={lesson.slug}
        class="onload-animation"
    />

    <!-- Comment section -->
    <Comment post={lesson}></Comment>
</MainGridLayout>
