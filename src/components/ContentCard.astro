---
import type { CollectionEntry } from "astro:content";
import path from "node:path";
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { getAllCourseLessons } from "../utils/content/course-utils";
import {
	assertExists,
	isCourse,
	isCourseEntry,
	isNonEmptyString,
	isPostEntry,
} from "../utils/type-guards";
import {
	getCourseUrlBySlug,
	getDir,
	getPostUrlBySlug,
} from "../utils/url-utils";
import ContentMeta from "./ContentMeta.astro";
import ImageWrapper from "./misc/ImageWrapper.astro";

interface Props {
	class?: string;
	style?: string;
	entry: CollectionEntry<"posts"> | CollectionEntry<"courses">;
	contentType: "post" | "course";
}

const { entry, contentType, style } = Astro.props;
const className = Astro.props.class;

// Type-safe property access
interface PostData {
	title: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	image: string;
	description: string;
}

interface CourseData {
	type: "course";
	title: string;
	published: Date;
	updated?: Date;
	category: string;
	level: "Beginner" | "Intermediate" | "Advanced";
	image?: string;
	description: string;
}

// Determine content-specific data
let url = "";
let totalLessons = 0;
let remarkPluginFrontmatter: Record<string, unknown> | null = null;

// Safe property access helpers using type guards
const getImage = (): string | undefined => {
	if (isPostEntry(entry)) {
		return entry.data.image;
	}
	if (isCourseEntry(entry) && isCourse(entry)) {
		return entry.data.image;
	}
	return undefined;
};

const getDescription = (): string => {
	if (isPostEntry(entry)) {
		return entry.data.description;
	}
	if (isCourseEntry(entry) && isCourse(entry)) {
		return entry.data.description;
	}
	return "";
};

const getPostData = (): PostData | null => {
	return isPostEntry(entry) ? entry.data : null;
};

const getCourseData = (): CourseData | null => {
	return isCourseEntry(entry) && isCourse(entry) ? entry.data : null;
};

if (isPostEntry(entry)) {
	url = getPostUrlBySlug(entry.slug);
	const rendered = await entry.render();
	remarkPluginFrontmatter = rendered.remarkPluginFrontmatter;
} else if (isCourseEntry(entry)) {
	url = getCourseUrlBySlug(entry.slug);
	if (isCourse(entry)) {
		const allLessons = await getAllCourseLessons(entry.slug);
		totalLessons = allLessons.length;
	}
}

const hasCover = (() => {
	const image = getImage();
	return isNonEmptyString(image);
})();
const coverWidth = "28%";
---

<div
	class:list={[
		"card-base flex flex-col-reverse md:flex-col w-full rounded-[var(--radius-large)] overflow-hidden relative",
		className,
	]}
	style={style}
>
	<div
		class:list={[
			"pl-6 md:pl-9 pr-6 md:pr-2 pt-6 md:pt-7 pb-6 relative",
			{
				"w-full md:w-[calc(100%_-_52px_-_12px)]": !hasCover,
				"w-full md:w-[calc(100%_-_var(--coverWidth)_-_12px)]": hasCover,
			},
		]}
	>
		<!-- Title -->
		<a
			href={url}
			class="transition group w-full block font-bold mb-3 text-3xl text-90
        hover:text-[var(--primary)] dark:hover:text-[var(--primary)]
        active:text-[var(--title-active)] dark:active:text-[var(--title-active)]
        before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
        before:absolute before:top-[35px] before:left-[18px] before:hidden md:before:block
        "
		>
			{entry.data.title}
			<Icon
				class="inline text-[2rem] text-[var(--primary)] md:hidden translate-y-0.5 absolute"
				name="material-symbols:chevron-right-rounded"
			/>
			<Icon
				class="text-[var(--primary)] text-[2rem] transition hidden md:inline absolute translate-y-0.5 opacity-0 group-hover:opacity-100 -translate-x-1 group-hover:translate-x-0"
				name="material-symbols:chevron-right-rounded"
			/>
		</a>

		<!-- Metadata -->
		{contentType === "post" ? (
			<ContentMeta
				contentType="post"
				published={getPostData()?.published}
				updated={getPostData()?.updated}
				tags={getPostData()?.tags || []}
				category={getPostData()?.category || null}
				hideTagsForMobile={true}
				hideUpdateDate={true}
				class="mb-4"
			/>
		) : (
			<ContentMeta
				contentType="course"
				class="mb-4"
				category={getCourseData()?.category}
				level={getCourseData()?.level}
				totalLessons={totalLessons}
			/>
		)}

		<!-- Description -->
		<div
			class:list={[
				"transition text-75 mb-3.5 pr-4",
				{ "line-clamp-2 md:line-clamp-1": !getDescription() },
			]}
		>
			{getDescription() || (contentType === "post" && remarkPluginFrontmatter?.excerpt)}
		</div>

		<!-- Additional metadata for posts -->
		{contentType === "post" && remarkPluginFrontmatter && (
			<div class="text-sm text-black/30 dark:text-white/30 flex gap-4 transition">
				<div>
					{remarkPluginFrontmatter.words} {" " + i18n(remarkPluginFrontmatter.words === 1 ? I18nKey.wordCount : I18nKey.wordsCount)}
				</div>
				<div>|</div>
				<div>
					{remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
				</div>
			</div>
		)}
	</div>

	<!-- Cover Image -->
	{hasCover && (
		<a
			href={url}
			aria-label={entry.data.title}
			class:list={[
				"group",
				"max-h-[20vh] md:max-h-none mx-4 mt-4 -mb-2 md:mb-0 md:mx-0 md:mt-0",
				"md:w-[var(--coverWidth)] relative md:absolute md:top-3 md:bottom-3 md:right-3 rounded-xl overflow-hidden active:scale-95",
			]}
		>
			{contentType === "post" ? (
				<>
					<div class="absolute pointer-events-none z-10 w-full h-full group-hover:bg-black/30 group-active:bg-black/50 transition" />
					<div class="absolute pointer-events-none z-20 w-full h-full flex items-center justify-center">
						<Icon
							name="material-symbols:chevron-right-rounded"
							class="transition opacity-0 group-hover:opacity-100 scale-50 group-hover:scale-100 text-white text-5xl"
						/>
					</div>
				</>
			) : (
				<>
					<div class="absolute pointer-events-none z-10 w-full h-full group-hover:bg-black/10 transition" />
					<div class="absolute pointer-events-none z-20 bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent p-4">
						<div
							class="course-btn bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm text-gray-900 dark:text-white px-3 py-2 rounded-lg font-medium text-sm flex items-center justify-center gap-2 group-hover:bg-[var(--primary)] group-hover:text-white transition-all duration-200 shadow-lg"
							data-course-slug={entry.slug}
							data-total-lessons={totalLessons}
						>
							<Icon name="material-symbols:play-arrow-rounded" class="text-lg course-icon" />
							<span class="course-btn-text">Start Course</span>
							<div class="course-progress hidden text-xs opacity-75">
								<span class="progress-text" />
							</div>
						</div>
					</div>
				</>
			)}
			<ImageWrapper
				src={getImage()!}
				basePath={path.join(contentType === "post" ? "content/posts/" : "content/courses/", getDir(entry.id))}
				alt={`Cover Image of ${entry.data.title}`}
				class="w-full h-full object-cover"
			/>
		</a>
	)}

	<!-- No Cover Button -->
	{!hasCover && (
		<a
			href={url}
			aria-label={entry.data.title}
			class="!hidden md:!flex btn-regular w-[3.25rem]
         absolute right-3 top-3 bottom-3 rounded-xl bg-[var(--enter-btn-bg)]
         hover:bg-[var(--enter-btn-bg-hover)] active:bg-[var(--enter-btn-bg-active)] active:scale-95
        "
		>
			<Icon
				name="material-symbols:chevron-right-rounded"
				class="transition text-[var(--primary)] text-4xl mx-auto"
			/>
		</a>
	)}
</div>
<div
	class="transition border-t-[1px] border-dashed mx-6 border-black/10 dark:border-white/[0.15] last:border-t-0 md:hidden"
>
</div>

<style define:vars={{ coverWidth }}>
</style>
