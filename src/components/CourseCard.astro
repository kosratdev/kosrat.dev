---
import type { CollectionEntry } from "astro:content";
import path from "node:path";
import { getCourseLessonCount } from "@utils/content/course-utils";
import { getCourseUrlBySlug, getDir } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { isCourse, isNonEmptyString, isSection } from "../utils/type-guards";
import BaseCard from "./BaseCard.astro";
import ContentMeta from "./ContentMeta.astro";
import ImageWrapper from "./misc/ImageWrapper.astro";

interface Props {
	class?: string;
	course: CollectionEntry<"courses">;
	style?: string;
}

const { course, style } = Astro.props;
const className = Astro.props.class;

let totalLessons = 0;
if (course.data.type === "course") {
	totalLessons = await getCourseLessonCount(course.slug);
}

const url = getCourseUrlBySlug(course.slug);
const { title } = course.data;

// Handle different course types safely using type guards
const description = (() => {
	if (isCourse(course)) {
		return course.data.description;
	}
	if (isSection(course)) {
		return course.data.description || "";
	}
	return "";
})();

const category = isCourse(course) ? course.data.category : "";
const level = isCourse(course) ? course.data.level : undefined;
const image = isCourse(course) ? course.data.image : undefined;

const hasCover = isCourse(course) && isNonEmptyString(image);
const coverWidth = "28%";
---

<BaseCard 
	{title} 
	{url} 
	{hasCover} 
	{coverWidth}
	{description}
	{style}
	class={className}
>
	<ContentMeta
		slot="metadata"
		contentType="course"
		class="mb-4"
		{category}
		{level}
		{totalLessons}
	/>

	{hasCover && image && (
		<a 
			slot="cover"
			href={url} 
			aria-label={title}
			class="group w-full h-full rounded-xl overflow-hidden active:scale-95"
		>
			<div class="absolute pointer-events-none z-10 w-full h-full group-hover:bg-black/10 transition rounded-xl" />
			<div class="absolute pointer-events-none z-20 bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent p-4 rounded-xl">
				<div 
					class="course-btn bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm text-gray-900 dark:text-white px-3 py-2 rounded-lg font-medium text-sm flex items-center justify-center gap-2 group-hover:bg-[var(--primary)] group-hover:text-white transition-all duration-200 shadow-lg"
					data-course-slug={course.slug}
					data-total-lessons={totalLessons}
				>
					<Icon name="material-symbols:play-arrow-rounded" class="text-lg course-icon" />
					<span class="course-btn-text">Start Course</span>
					<div class="course-progress hidden text-xs opacity-75">
						<span class="progress-text"></span>
					</div>
				</div>
			</div>
			<ImageWrapper
				id={`course-cover-${course.slug}`}
				src={image}
				basePath={path.join("content/courses/", getDir(course.id))}
				class="w-full h-full object-cover rounded-xl"
			/>
		</a>
	)}
</BaseCard>
